<link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"
   integrity="sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A=="
   crossorigin=""/>
        <!-- Make sure you put this AFTER Leaflet's CSS -->
 <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"
   integrity="sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA=="
   crossorigin=""></script>
   <script src="https://makinacorpus.github.io/Leaflet.TextPath/leaflet.textpath.js"></script>
<div id="mapid" ></div>

<!-- https://github.com/mlwilkerson/fa-custom-icon-demo --
<script src="https://use.fontawesome.com/releases/v5.0.9/js/all.js"></script>
<script>
    var faSplat = {
  prefix: 'fac',
  iconName: 'splat',
  icon: [
    512, 512,
    [],
    null,
    'M414.64,343.52,414,507H108.11V341M226.38,507h66.88V396.77H226.38Zm33.44-139.33c-32.2,0-33.37,28.48-33.37,28.48h66.81S290.79,367.67,259.82,367.67ZM179,156m184.49,42.62L260,119.68l-102.29,78,32.29-24M190,279V173.69m140-1,2.5,106.5M108.11,341,55.63,381.29,190,278.8m224.64,64.72,50.15,37.77L333,280.76m-87.92-17H279v-55.9H245.08Zm17-70.66c-16.33,0-16.92,14.44-16.92,14.44H279S277.74,193.13,262,193.13ZM260,119V4M232,32h56M222,60h77M232,88h56'
  ]
}
FontAwesome.library.add(faSplat)
<!-- -->
<script>
    
    var mymap = L.map('mapid');  
        
    var logo = L.control({position: 'bottomright'});
    logo.onAdd = function(map){
        var div = L.DomUtil.create('div', 'myclass');
        div.innerHTML= '<div class="leaflet-bar"><a id="maplink" href="/map/">  <i class="fac fa-splat"></i><i class="fa fa-expand-arrows-alt" title=""></i></a></div>';
        return div;
    }
    logo.addTo(mymap);
        
    //before .setView!
    mymap.on('load', onMapMoved);
    mymap.on('load', loadBoundary);

    mymap.setView(
        {% if center %}
            [{{ center.lat }}, {{ center.lon}} ], {% if center.zoom %} {{ center.zoom }} {% else %} 13 {% endif %} 
        {% elseif location %}
            [{{ location.lat }}, {{ location.lon}} ], {% if location.zoom %} {{ location.zoom }} {% else %} 13 {% endif %} 
        {% else %}
            [47.5, 19.05 ], 13
        {% endif %} 
    );
                        
    //https://leaflet-extras.github.io/leaflet-providers/preview/
    var CartoDB_Voyager = L.tileLayer('https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',
        subdomains: 'abcd',
        maxZoom: 19
    });
	var OpenStreetMap_Mapnik = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
		maxZoom: 19,
		attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
	});
	var Stamen_Terrain = 		L.tileLayer('https://stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}{r}.{ext}', {
		attribution: 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
		subdomains: 'abcd',
		minZoom: 0,
		maxZoom: 18,
		ext: 'png'
	});
    OpenStreetMap_Mapnik.addTo(mymap);
    
    
    var layerControls = new Array();

    {% if dioceseslayer %}
    var diocesesLayer = L.geoJSON({{ dioceseslayer.geoJson|raw }}, { 
            onEachFeature: function (feature, layer) {
                /*layer.setText('maci maci', {repeat: true, offset: -5});*/
            },
            style: {
                    fillColor: 'blue',
                    weight: 3,
                    opacity: 0.4,
                    color: 'blue',
                    dashArray: '3',
                    fillOpacity: 0.2,
                    fillRule: null,
                    fill: null,
                  }
                           /* onEachFeature: onEachFeature */ 
    });       
    diocesesLayer.addTo(mymap);
    layerControls['Római katolikus egyházmegyék'] = diocesesLayer;  
    {% endif %}               
    
      
      
    /* Marker of current church */
    {% if location %}
        var greenIcon = new L.Icon({
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-green.png',
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
            iconSize: [27, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });
        var marker = L.marker([{{ location.lat }}, {{ location.lon}}], {icon: greenIcon}).addTo(mymap);
    {% endif %}
      
    function loadBoundary(e) {
        {% if boundary %}        
            $.getJSON( "/ajax/boundarygeojson?osm={{ boundary }}" , function( data ) {
                    if(data) {
                        var boundaryLayer = L.geoJSON(data, { 
                            style: {
                                /* Feltételes formázásra példa itt: http://jsfiddle.net/hx5pxdt8/ */
                                fillColor: 'blue',
                                weight: 2,
                                opacity: 1,
                                color: 'white',
                                dashArray: '3',
                                fillOpacity: 0.2,
                              }
                        });
                        var bounds = L.latLngBounds([]);
                        boundaryLayer.addTo(mymap);
                        mymap.fitBounds(boundaryLayer.getBounds());
                        // mymap.setZoom(mymap.getZoom() - 1 );
                    }
                });                  
        {% endif %}    
    }
    
    function layerIcon(feature, latlng, icon) {
        if(feature.properties.active == 1 ) {
            if( feature.properties.denomination == 'roman_catholic') var iconUrl = '/img/marker_church_rm_inv.png';
            else if( feature.properties.denomination == 'greek_catholic') var iconUrl = '/img/marker_church_gr_inv.png';
        } else {
            if( feature.properties.denomination == 'roman_catholic') var iconUrl = '/img/marker_church_rm.png';
            else if( feature.properties.denomination == 'greek_catholic') var iconUrl = '/img/marker_church_gr.png';
            else var iconUrl = 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-blue.png';
        }

        var greenIcon = new L.Icon({
                iconUrl:  iconUrl,
                shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
                iconSize: [27, 41],
                iconAnchor: [12, 41],
                popupAnchor: [1, -34],
                shadowSize: [41, 41]
            });
            return L.marker(latlng, {
                icon: greenIcon
            });                    
    };
    
    
    var activeRomanLayer = L.geoJSON(null, {    
        pointToLayer: function(feature, latlng) { return layerIcon(feature, latlng, "rm");}  , 
        onEachFeature: onEachFeature
    }).addTo(mymap);
    var activeGreekLayer = L.geoJSON(null, {    
        pointToLayer: function(feature, latlng) { return layerIcon(feature, latlng, "rm");}  , 
        onEachFeature: onEachFeature
    }).addTo(mymap);
    var inactiveLayer = L.geoJSON(null, {    
        pointToLayer: function(feature, latlng) { return layerIcon(feature, latlng, "ma");}  , 
        onEachFeature: onEachFeature
    }).addTo(mymap);
    
    layerControls['Római katolikus aktív templomok'] =  activeRomanLayer,
    layerControls['Görögkatolikus aktív templomok'] = activeGreekLayer,
    layerControls['Templomok és misézőhelyek rendszeres szentmisék nélkül'] = inactiveLayer,
    
    L.control.layers( null, layerControls ).addTo(mymap);
       
    function onMapMoved(e) {
        var box = this.getBounds();                
        var params = box['_southWest']['lat'] + ";" + box['_southWest']['lng']  + ";" + box['_northEast']['lat'] + ";" + box['_northEast']['lng'] ;                        

       var link = "/terkep?map=" + this.getZoom()  + "/" + this.getCenter().lat  + "/" + this.getCenter().lng  {% if church_id %} + "&tid={{ church_id }}"  {% endif %} {% if boundary %} + "&boundary={{ boundary }}"  {% endif %} ;
                     
       
       $( "#maplink" ).attr("href", link);
       if(window.location.pathname == '/terkep') {       
            history.replaceState(null, '', link);
       }

       if( this.getZoom() < 11 ) {
           if(activeRomanLayer) activeRomanLayer.clearLayers();
           if(activeGreekLayer) activeGreekLayer.clearLayers();
           if(inactiveLayer) inactiveLayer.clearLayers();

           return;
      }
      
        $.getJSON( "/ajax/churchesinbbox?bbox=" + params , function( data ) {                              
            if(data) {

                activeRomanLayer.clearLayers();
                activeGreekLayer.clearLayers();
                inactiveLayer.clearLayers();
                                 
                var items = [];
                $.each( data, function( key, val ) {
                    var current = {% if church_id %} {{ church_id }} {% else %} -1 {% endif %};
                    if( current != val.id) {
                        var popupContent = "<a href='/templom/" + val.id.toString() + "'>"  + val.nev + "</a>";
                        if(val.thumbnail) popupContent += "<br/><img src='https://miserend.hu/" + val.thumbnail + "'>";
                        var geojsonFeature = {
                            "type": "Feature",                                                      
                            "properties": {
                                "name": val.nev,
                                "popupContent": popupContent,
                                "active": val.active,
                                "denomination": val.denomination,
                            },
                            "geometry": {
                                "type": "Point",
                                "coordinates": [ val.lon , val.lat]
                            },
                        };
                        
                        if( val.active == 1 ) {
                            if( val.denomination == 'roman_catholic') {                            
                                activeRomanLayer.addData(geojsonFeature);
                            } else if ( val.denomination == 'greek_catholic') {
                                activeGreekLayer.addData(geojsonFeature);
                            }                            
                        } else {
                                inactiveLayer.addData(geojsonFeature);
                        }
                    }
                });
            }
        });   
    }
        
    mymap.on('moveend', onMapMoved);
                
    function onEachFeature(feature, layer) {
        // does this feature have a property named popupContent?
        if (feature.properties && feature.properties.popupContent) {
        layer.bindPopup(feature.properties.popupContent,{
                maxWidth: "auto",
                autoPan: false
              });
        }
        layer.on('mouseover', function(event){
          layer.openPopup();
        });
    }
    

    // check for Geolocation 
    {% if not center and not location %}
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function(position) {
            mymap.flyTo(new L.LatLng(position.coords.latitude, position.coords.longitude));      
        });  
    }
    {% endif %}

</script>   
